
<beans:beans xmlns="http://www.springframework.org/schema/security" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
	 
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/security 
        http://www.springframework.org/schema/security/spring-security.xsd
        http://www.springframework.org/schema/security/oauth2 
        http://www.springframework.org/schema/security/spring-security-oauth2.xsd">
	
	
	<!--  setup for the authorization and token endpoints /oauth/authorize and /oauth/token -->
	<oauth2:authorization-server client-details-service-ref="clientDetailsService"
								 user-approval-handler-ref="userApprovalHandler">
		<oauth2:authorization-code/>
		<oauth2:client-credentials/>		
	</oauth2:authorization-server>

	<beans:bean id="clientDetailsUserService" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<beans:constructor-arg ref="clientDetailsService"/>
	</beans:bean>

	<oauth2:client-details-service id="clientDetailsService">
	
		<oauth2:client client-id="mailmonkey"
					   authorized-grant-types="authorization_code"
					   authorities="ROLE_CLIENT"
					   scope="read,write"
					   secret="somesecretkey"/>
	
		<oauth2:client client-id="trusted"
					   authorized-grant-types="client_credentials"
					   authorities="ROLE_TRUSTED"
					   scope="trusted"
					   secret="trustedsecret"/>	
	
	</oauth2:client-details-service>	
	
 	<!--  This is a basic security set up, currently for the web-tier only -->
 	
	<!--  For this course, we will use in memory authentication - see module 1 of Spring Security Course for details on JDBC providers -->
	<authentication-manager>
		<authentication-provider>
			<user-service>			
				<user name="rac" password="secret" authorities="ROLE_CRM_USER"/>
			</user-service>
		</authentication-provider>
	</authentication-manager>
	
	<!--  a second manager for the electronic clients ONLY -->
	<authentication-manager id="oauthTokenEndpointAuthManager">
		<authentication-provider user-service-ref="clientDetailsUserService"/>	
	</authentication-manager>
	
	<!-- OAuth helper beans -->
	<beans:bean id="oauthTokenEntry" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint"/>
	<oauth2:resource-server id="oauthFilter"/>
	<beans:bean id="expressionHandler" class="org.springframework.security.oauth2.provider.expression.OAuth2WebSecurityExpressionHandler"/>

	<!--  the settings for our REST service -->
	<http pattern="/rest/**" create-session="stateless" entry-point-ref="oauthTokenEntry">
		<intercept-url pattern="/rest/customers" method="POST" access="#oauth2.hasScope('write')  or #oauth2.hasScope('trusted')" requires-channel="https"/>		
		<intercept-url pattern="/rest/**" access="#oauth2.hasScope('read') or #oauth2.hasScope('write') or #oauth2.hasScope('trusted')" requires-channel="https"/>	
		<custom-filter ref="oauthFilter" before="PRE_AUTH_FILTER"/>
		<expression-handler ref="expressionHandler"/>
		
		<csrf disabled="true"/>		
	</http>
	
	<!-- specific settings for the token endpoint -->
	<http pattern="/oauth/token" create-session="stateless" authentication-manager-ref="oauthTokenEndpointAuthManager">
	
		<intercept-url pattern="/oauth/token" access="hasRole('ROLE_CLIENT')  or hasRole('ROLE_TRUSTED')" requires-channel="https"/>
		<http-basic/>
		<csrf disabled="true"/>
	
	</http>
	
	<!--  this is the vanilla website settings...-->
	<http pattern="/**">	
		<intercept-url pattern="/oauth/**" access="hasRole('ROLE_CRM_USER')" requires-channel="https"/>
		<intercept-url pattern="/login.jsp" access="permitAll()" requires-channel="https"/>
		<intercept-url pattern="/css/**" access="permitAll()" requires-channel="https"/>		
		<intercept-url pattern="/login" access="permitAll()" requires-channel="https"/>
		<intercept-url pattern="/**" access="hasRole('ROLE_CRM_USER')" requires-channel="https"/>
	
		<form-login login-page="/login.jsp"
					authentication-failure-url="/login.jsp?error=1"
					login-processing-url="/login"/>
					
		<logout logout-success-url="/all-customers.html"/>
							
		<csrf/> 		
	</http>
	
	<!--  configuration specifically to handle user approval -->
	<beans:bean id="approvalStore" class="org.springframework.security.oauth2.provider.approval.InMemoryApprovalStore"/>
	<beans:bean id="userApprovalHandler" class="org.springframework.security.oauth2.provider.approval.ApprovalStoreUserApprovalHandler" autowire="byType"/>
	
</beans:beans>	